cmake_minimum_required(VERSION 3.10)
project(hexagon)
set(CMAKE_CXX_STANDARD 20)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_find")

option(OPT_STL_DEBUGGING "Build with STL debugging"  OFF)
option(OPT_LOGGING "Build with logging"  OFF)
option(OPT_PROF "Build for profiling"  OFF)
option(OPT_COV "Build for code coverage"  OFF)
option(OPT_LIBCXX "Build with libcxx"  OFF)
option(OPT_ANALYZE "add -fanalyzer"  OFF)
option(OPT_SYMBOLS "With symbols" OFF)
option(OPT_SANITIZE "With -fsanitize" OFF)

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(LINUX TRUE)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(DARWIN TRUE)
elseif (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    set(FREEBSD TRUE)
endif()

# checking if we are called in the correct way:
#  with a -B argument.  and without a cache file in the source directory.
if (CMAKE_CACHEFILE_DIR STREQUAL "${CMAKE_SOURCE_DIR}")
    message(FATAL_ERROR "\nUnexpected CMakeCache.txt file in the source directory. Please remove it.")
    return()
endif()

if (EXISTS ${CMAKE_BINARY_DIR}/CMakeLists.txt)
    message(FATAL_ERROR "\nRun cmake with an explicit -B buildpath")
    return()
endif()

if (OPT_ANALYZE)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fanalyzer")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --analyze")
    endif()
endif()
if (OPT_SANITIZE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=dataflow")
endif()
if (OPT_LIBCXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
endif()
if (OPT_STL_DEBUGGING)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GLIBCXX_DEBUG")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_LIBCPP_DEBUG_LEVEL=1")
endif()
if (OPT_PROF)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg ")
endif()
if (OPT_SYMBOLS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g ")
endif()
if (OPT_COV)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "gcc code coverage")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftest-coverage -fprofile-arcs ")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs ")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "llvm code coverage")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-instr-generate -fcoverage-mapping -fdebug-info-for-profiling")
        #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mllvm -inline-threshold=100000")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fprofile-instr-generate -fcoverage-mapping")
    else()
        message(STATUS "don't know how to add code coverage for ${CMAKE_CXX_COMPILER_ID }")
    endif()
endif()
if(MSVC)
    # /MP = multithreaded build
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
    # /utf-8 = utf8 source and execution
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")
    add_definitions(-DNOMINMAX -DNOGDI)
endif()


find_package(idasdk REQUIRED)

set(GNUTOOLS_PATH ${CMAKE_SOURCE_DIR}/hx/sourceryg++-2012.03-151-hexagon/binutils-hexagon-2012.03)

list(APPEND GNUTOOLS_SRC ${GNUTOOLS_PATH}/bfd/cpu-hexagon.c)
list(APPEND GNUTOOLS_SRC ${GNUTOOLS_PATH}/bfd/hexagon-isa.c)
list(APPEND GNUTOOLS_SRC ${GNUTOOLS_PATH}/opcodes/hexagon-dis.c)
list(APPEND GNUTOOLS_SRC ${GNUTOOLS_PATH}/opcodes/hexagon-opc.c)
list(APPEND GNUTOOLS_SRC ${GNUTOOLS_PATH}/libiberty/safe-ctype.c)

add_library(gnutools STATIC ${GNUTOOLS_SRC})
set_target_properties(gnutools PROPERTIES POSITION_INDEPENDENT_CODE ON)
target_include_directories(gnutools PUBLIC ${GNUTOOLS_PATH}/include)
target_include_directories(gnutools PUBLIC ${GNUTOOLS_PATH}/bfd)
target_include_directories(gnutools PUBLIC ${GNUTOOLS_PATH}/include/opcode)
if (WIN32)
target_include_directories(gnutools PUBLIC ${CMAKE_SOURCE_DIR}/build-win/opcodes)
target_include_directories(gnutools PUBLIC ${CMAKE_SOURCE_DIR}/build-win/bfd)
else()
target_include_directories(gnutools PUBLIC ${CMAKE_SOURCE_DIR}/build-mac/opcodes)
target_include_directories(gnutools PUBLIC ${CMAKE_SOURCE_DIR}/build-mac/bfd)
endif()

add_library(hexagon SHARED hexagon.cpp bfd_funcs.cpp dummy-scan.c)
target_compile_definitions(hexagon PUBLIC __IDP__ __X64__)
target_compile_definitions(hexagon PUBLIC __DEFINE_ROOT_NODE__)
target_compile_definitions(hexagon PUBLIC __DEFINE_INF__)
target_compile_definitions(hexagon PUBLIC __DEFINE_PH__)
if (OPT_LOGGING)
    target_compile_definitions(hexagon PUBLIC TRACELOG)
endif()
target_link_libraries(hexagon idasdk)
target_link_libraries(hexagon gnutools)
set_target_properties(hexagon PROPERTIES PREFIX "")

add_library(hexagon64 SHARED hexagon.cpp bfd_funcs.cpp dummy-scan.c)
target_compile_definitions(hexagon64 PUBLIC __EA64__=1)
target_compile_definitions(hexagon64 PUBLIC __IDP__ __X64__)
target_compile_definitions(hexagon64 PUBLIC __DEFINE_ROOT_NODE__)
target_compile_definitions(hexagon64 PUBLIC __DEFINE_INF__)
target_compile_definitions(hexagon64 PUBLIC __DEFINE_PH__)
if (OPT_LOGGING)
    target_compile_definitions(hexagon64 PUBLIC TRACELOG)
endif()
target_link_libraries(hexagon64 idasdk)
target_link_libraries(hexagon64 gnutools)
set_target_properties(hexagon64 PROPERTIES PREFIX "")


